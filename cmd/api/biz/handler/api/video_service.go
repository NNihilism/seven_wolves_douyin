// Code generated by hertz generator.

package api

import (
	"context"
	"douyin/cmd/api/biz/model/video"
	"douyin/cmd/api/rpc"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"log"
)

// GetFeed .
// @router /douyin/feed [GET]
func GetFeed(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.FeedRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(video.FeedResponse)

	c.JSON(consts.StatusOK, resp)
}

// PublishVideo .
// @router /douyin/publish/action [POST]
func PublishVideo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.PublishActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 调用rpc
	client, err := rpc.InitVideoClient()
	if err != nil {
		log.Fatal("failed to connect to VideoService")
		return
	}
	resp, err := rpc.PublishVideo(client, ctx, &req)

	c.JSON(consts.StatusOK, resp)
}

// GetPublishVideoList .
// @router /douyin/publish/list [GET]
func GetPublishVideoList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.PublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(video.PublishListResponse)

	c.JSON(consts.StatusOK, resp)
}
