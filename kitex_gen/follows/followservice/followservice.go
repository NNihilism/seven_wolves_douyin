// Code generated by Kitex v0.4.4. DO NOT EDIT.

package followservice

import (
	"context"
	follows "douyin/idl/kitex_gen/follows"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return followServiceServiceInfo
}

var followServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FollowService"
	handlerType := (*follows.FollowService)(nil)
	methods := map[string]kitex.MethodInfo{
		"RelationAction":   kitex.NewMethodInfo(relationActionHandler, newFollowServiceRelationActionArgs, newFollowServiceRelationActionResult, false),
		"GetFollowList":    kitex.NewMethodInfo(getFollowListHandler, newFollowServiceGetFollowListArgs, newFollowServiceGetFollowListResult, false),
		"GetFollowerList":  kitex.NewMethodInfo(getFollowerListHandler, newFollowServiceGetFollowerListArgs, newFollowServiceGetFollowerListResult, false),
		"GetFollowCount":   kitex.NewMethodInfo(getFollowCountHandler, newFollowServiceGetFollowCountArgs, newFollowServiceGetFollowCountResult, false),
		"GetFollowerCount": kitex.NewMethodInfo(getFollowerCountHandler, newFollowServiceGetFollowerCountArgs, newFollowServiceGetFollowerCountResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "follows",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func relationActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*follows.FollowServiceRelationActionArgs)
	realResult := result.(*follows.FollowServiceRelationActionResult)
	success, err := handler.(follows.FollowService).RelationAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFollowServiceRelationActionArgs() interface{} {
	return follows.NewFollowServiceRelationActionArgs()
}

func newFollowServiceRelationActionResult() interface{} {
	return follows.NewFollowServiceRelationActionResult()
}

func getFollowListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*follows.FollowServiceGetFollowListArgs)
	realResult := result.(*follows.FollowServiceGetFollowListResult)
	success, err := handler.(follows.FollowService).GetFollowList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFollowServiceGetFollowListArgs() interface{} {
	return follows.NewFollowServiceGetFollowListArgs()
}

func newFollowServiceGetFollowListResult() interface{} {
	return follows.NewFollowServiceGetFollowListResult()
}

func getFollowerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*follows.FollowServiceGetFollowerListArgs)
	realResult := result.(*follows.FollowServiceGetFollowerListResult)
	success, err := handler.(follows.FollowService).GetFollowerList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFollowServiceGetFollowerListArgs() interface{} {
	return follows.NewFollowServiceGetFollowerListArgs()
}

func newFollowServiceGetFollowerListResult() interface{} {
	return follows.NewFollowServiceGetFollowerListResult()
}

func getFollowCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*follows.FollowServiceGetFollowCountArgs)
	realResult := result.(*follows.FollowServiceGetFollowCountResult)
	success, err := handler.(follows.FollowService).GetFollowCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFollowServiceGetFollowCountArgs() interface{} {
	return follows.NewFollowServiceGetFollowCountArgs()
}

func newFollowServiceGetFollowCountResult() interface{} {
	return follows.NewFollowServiceGetFollowCountResult()
}

func getFollowerCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*follows.FollowServiceGetFollowerCountArgs)
	realResult := result.(*follows.FollowServiceGetFollowerCountResult)
	success, err := handler.(follows.FollowService).GetFollowerCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFollowServiceGetFollowerCountArgs() interface{} {
	return follows.NewFollowServiceGetFollowerCountArgs()
}

func newFollowServiceGetFollowerCountResult() interface{} {
	return follows.NewFollowServiceGetFollowerCountResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) RelationAction(ctx context.Context, req *follows.RelationActionRequest) (r *follows.RelationActionResponse, err error) {
	var _args follows.FollowServiceRelationActionArgs
	_args.Req = req
	var _result follows.FollowServiceRelationActionResult
	if err = p.c.Call(ctx, "RelationAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowList(ctx context.Context, req *follows.GetFollowListRequest) (r *follows.GetFollowListResponse, err error) {
	var _args follows.FollowServiceGetFollowListArgs
	_args.Req = req
	var _result follows.FollowServiceGetFollowListResult
	if err = p.c.Call(ctx, "GetFollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowerList(ctx context.Context, req *follows.GetFollowerListRequest) (r *follows.GetFollowerListResponse, err error) {
	var _args follows.FollowServiceGetFollowerListArgs
	_args.Req = req
	var _result follows.FollowServiceGetFollowerListResult
	if err = p.c.Call(ctx, "GetFollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowCount(ctx context.Context, req *follows.GetFollowCountRequest) (r *follows.GetFollowCountResponse, err error) {
	var _args follows.FollowServiceGetFollowCountArgs
	_args.Req = req
	var _result follows.FollowServiceGetFollowCountResult
	if err = p.c.Call(ctx, "GetFollowCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowerCount(ctx context.Context, req *follows.GetFollowerCountRequest) (r *follows.GetFollowerCountResponse, err error) {
	var _args follows.FollowServiceGetFollowerCountArgs
	_args.Req = req
	var _result follows.FollowServiceGetFollowerCountResult
	if err = p.c.Call(ctx, "GetFollowerCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
