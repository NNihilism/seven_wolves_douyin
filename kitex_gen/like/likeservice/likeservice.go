// Code generated by Kitex v0.4.4. DO NOT EDIT.

package likeservice

import (
	"context"
	like "douyin/kitex_gen/like"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return likeServiceServiceInfo
}

var likeServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "LikeService"
	handlerType := (*like.LikeService)(nil)
	methods := map[string]kitex.MethodInfo{
		"LikeAction":  kitex.NewMethodInfo(likeActionHandler, newLikeServiceLikeActionArgs, newLikeServiceLikeActionResult, false),
		"GetLikeList": kitex.NewMethodInfo(getLikeListHandler, newLikeServiceGetLikeListArgs, newLikeServiceGetLikeListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "like",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func likeActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*like.LikeServiceLikeActionArgs)
	realResult := result.(*like.LikeServiceLikeActionResult)
	success, err := handler.(like.LikeService).LikeAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLikeServiceLikeActionArgs() interface{} {
	return like.NewLikeServiceLikeActionArgs()
}

func newLikeServiceLikeActionResult() interface{} {
	return like.NewLikeServiceLikeActionResult()
}

func getLikeListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*like.LikeServiceGetLikeListArgs)
	realResult := result.(*like.LikeServiceGetLikeListResult)
	success, err := handler.(like.LikeService).GetLikeList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLikeServiceGetLikeListArgs() interface{} {
	return like.NewLikeServiceGetLikeListArgs()
}

func newLikeServiceGetLikeListResult() interface{} {
	return like.NewLikeServiceGetLikeListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) LikeAction(ctx context.Context, req *like.LikeActionRequest) (r *like.LikeActionResponse, err error) {
	var _args like.LikeServiceLikeActionArgs
	_args.Req = req
	var _result like.LikeServiceLikeActionResult
	if err = p.c.Call(ctx, "LikeAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLikeList(ctx context.Context, req *like.GetLikeListRequest) (r *like.GetLikeListResponse, err error) {
	var _args like.LikeServiceGetLikeListArgs
	_args.Req = req
	var _result like.LikeServiceGetLikeListResult
	if err = p.c.Call(ctx, "GetLikeList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
